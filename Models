Logistic Regression:

start = timer()
model = LogisticRegression()
model.fit(X_train, Y_train)
train_patched = timer() - start
f"Intel® extension for Scikit-learn time: {train_patched:.2f} s"

from sklearnex import unpatch_sklearn
unpatch_sklearn()

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', test_data_accuracy)

from sklearn.metrics import classification_report
print(classification_report(Y_test, X_test_prediction))

----------------------------------------------------------------------------

Decision Tree:

from sklearn.tree import DecisionTreeClassifier
from timeit import default_timer as timer
​
unpatch_sklearn()
start = timer()
DT = DecisionTreeClassifier()
DT.fit(X_train, Y_train)
train_time = timer() - start
f"Scikit-learn time: {train_time:.2f} s"

pred_dt = DT.predict(X_test)
DT.score(X_test, Y_test)

print(classification_report(Y_test, pred_dt))

--------------------------------------------------------------------

Random Forest:

from sklearn.ensemble import RandomForestClassifier
patch_sklearn()
start = timer()
rf = RandomForestClassifier(random_state=0)
rf.fit(X_train, Y_train)
train_patched = timer() - start
f"Intel® extension for Scikit-learn time: {train_patched:.2f} s"

unpatch_sklearn()
start = timer()
rf = RandomForestClassifier(random_state=0)
rf.fit(X_train, Y_train)
train_patched = timer() - start
f"Scikit-learn time: {train_patched:.2f} s"

rf.predict(X_test)
rf.score(X_test, Y_test)

from sklearn.metrics import classification_report
pred_rf = rf.predict(X_test)
print(classification_report(Y_test, pred_rf))

------------------------------------------------------------------
